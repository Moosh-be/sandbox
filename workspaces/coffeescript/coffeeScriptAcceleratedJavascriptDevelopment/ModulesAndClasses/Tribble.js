// Generated by CoffeeScript 1.3.3
(function() {
  var A, B, Circle, Dog, Enterprise, Pet, Shape, Square, Starship, Tribble, Voyager, a, b, dog1, requisitionStarship, showArea, stringVersion, tribble1, tribble2, version,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tribble = (function() {

    function Tribble() {
      this.isAlive = true;
      Tribble.count++;
    }

    Tribble.prototype.breed = function() {
      if (this.isAlive) {
        return new Tribble;
      }
    };

    Tribble.prototype.die = function() {
      if (this.isAlive) {
        Tribble.count--;
      }
      return this.isAlive = false;
    };

    Tribble.count = 0;

    Tribble.makeTrouble = function() {
      var i;
      return console.log(((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = this.count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push('Trouble!' + i);
        }
        return _results;
      }).call(this)).join(' '));
    };

    return Tribble;

  })();

  tribble1 = new Tribble;

  tribble2 = new Tribble;

  Tribble.makeTrouble();

  tribble2.die();

  Tribble.makeTrouble();

  tribble2.breed();

  tribble1.breed().breed().breed();

  Tribble.makeTrouble();

  stringVersion = "2.2.1.3";

  version = parseInt(stringVersion.split('.')[0]) + 0.1 * parseInt(0 + (stringVersion.split('.')[1] != null));

  console.log(version);

  stringVersion = "2";

  version = function(string) {
    return parseInt(stringVersion.split('.')[0]) + 0.1 * parseInt(0 + (stringVersion.split('.')[1] != null));
  };

  console.log(version(stringVersion));

  A = (function() {

    function A() {
      this.name = A.name;
    }

    return A;

  })();

  B = (function(_super) {

    __extends(B, _super);

    function B() {
      this.name = B.name;
    }

    return B;

  })(A);

  a = new A;

  b = new B;

  console.log(A.name);

  console.log(B.name);

  console.log(a.name);

  console.log(b.name);

  Pet = (function() {

    function Pet() {
      this.isHungry = true;
    }

    Pet.prototype.eat = function() {
      return this.isHungry = false;
    };

    return Pet;

  })();

  Dog = (function(_super) {

    __extends(Dog, _super);

    function Dog() {
      return Dog.__super__.constructor.apply(this, arguments);
    }

    Dog.prototype.eat = function() {
      console.log('*crunch, crunch*');
      return Dog.__super__.eat.call(this);
    };

    Dog.prototype.fetch = function() {
      console.log('Yip yip!');
      return this.isHungry = true;
    };

    return Dog;

  })(Pet);

  dog1 = new Dog;

  dog1.eat();

  console.log(dog1.isHungry);

  dog1.fetch();

  console.log(dog1.isHungry);

  dog1.eat();

  dog1.eat();

  Shape = (function() {

    function Shape(width) {
      this.width = width;
    }

    Shape.prototype.computeArea = function() {
      throw new Error('I am an abstract class!');
    };

    return Shape;

  })();

  Square = (function(_super) {

    __extends(Square, _super);

    function Square() {
      return Square.__super__.constructor.apply(this, arguments);
    }

    Square.prototype.computeArea = function() {
      return Math.pow(this.width, 2);
    };

    return Square;

  })(Shape);

  Circle = (function(_super) {

    __extends(Circle, _super);

    function Circle() {
      return Circle.__super__.constructor.apply(this, arguments);
    }

    Circle.prototype.radius = function() {
      return this.width / 2;
    };

    Circle.prototype.computeArea = function() {
      return Math.PI * Math.pow(this.radius(), 2);
    };

    return Circle;

  })(Shape);

  showArea = function(shape) {
    if (!(shape instanceof Shape)) {
      throw new Error('showArea requires a Shape instance');
    }
    return console.log(shape.computeArea());
  };

  showArea(new Square(2));

  showArea(new Circle(2));

  Starship = (function() {

    function Starship(name) {
      this.name = name;
    }

    Starship.prototype.travelSpace = function() {
      return console.log("" + this.name + " is travelling to space");
    };

    return Starship;

  })();

  Enterprise = (function(_super) {

    __extends(Enterprise, _super);

    function Enterprise(name) {
      Enterprise.__super__.constructor.apply(this, arguments);
    }

    return Enterprise;

  })(Starship);

  Voyager = (function(_super) {

    __extends(Voyager, _super);

    function Voyager(name) {
      Voyager.__super__.constructor.apply(this, arguments);
    }

    return Voyager;

  })(Starship);

  requisitionStarship = function(captain) {
    switch (captain) {
      case 'Kirk':
      case 'April':
      case 'Pike':
      case 'Decker':
      case 'Spock':
        return new Enterprise('Constitution');
      case 'Picard':
      case 'Riker':
      case 'Jellico':
        return new Enterprise('Galaxy');
      case 'Archer':
      case 'T\'Pol':
      case 'Forrest':
        return new Enterprise('NX');
      case 'Janeway':
        return new Voyager('Intrepid');
      default:
        throw new Error('Invalid starship catpain');
    }
  };

  requisitionStarship('Kirk').travelSpace();

  requisitionStarship('Picard').travelSpace();

  requisitionStarship('Riker').travelSpace();

  requisitionStarship('Janeway').travelSpace();

}).call(this);
